MODULE NAME
    rhsm.connection


CLASSES

    class NullHandler(logging.Handler)


        emit(self, record)
            Do whatever it takes to actually log the specified logging
            record.

            This version is intended to be implemented by subclasses and so
            raises a NotImplementedError.

        Inherited methods
            logging.Handler.__init__(self, level=NOTSET)
            logging.Handler.acquire(self)
            logging.Filterer.addFilter(self, filter)
            logging.Handler.close(self)
            logging.Handler.createLock(self)
            logging.Filterer.filter(self, record)
            logging.Handler.flush(self)
            logging.Handler.format(self, record)
            logging.Handler.handle(self, record)
            logging.Handler.handleError(self, record)
            logging.Handler.release(self)
            logging.Filterer.removeFilter(self, filter)
            logging.Handler.setFormatter(self, fmt)
            logging.Handler.setLevel(self, level)

    class ConnectionException(exceptions.Exception)

        Inherited methods
            exceptions.BaseException.__delattr__(...)
            exceptions.BaseException.__getattribute__(...)
            exceptions.BaseException.__getitem__(x, y)
            exceptions.BaseException.__getslice__(x, i, j)
            exceptions.Exception.__init__(...)
            exceptions.Exception.__new__(T, S, *...)
            exceptions.BaseException.__reduce__(...)
            exceptions.BaseException.__repr__(x)
            exceptions.BaseException.__setattr__(...)
            exceptions.BaseException.__setstate__(...)
            exceptions.BaseException.__str__(x)
            exceptions.BaseException.__unicode__(...)

    class ConnectionSetupException(ConnectionException)

        Inherited methods
            exceptions.BaseException.__delattr__(...)
            exceptions.BaseException.__getattribute__(...)
            exceptions.BaseException.__getitem__(x, y)
            exceptions.BaseException.__getslice__(x, i, j)
            exceptions.Exception.__init__(...)
            exceptions.Exception.__new__(T, S, *...)
            exceptions.BaseException.__reduce__(...)
            exceptions.BaseException.__repr__(x)
            exceptions.BaseException.__setattr__(...)
            exceptions.BaseException.__setstate__(...)
            exceptions.BaseException.__str__(x)
            exceptions.BaseException.__unicode__(...)

    class BadCertificateException(ConnectionException)
        Thrown when an error parsing a certificate is encountered.


        __init__(self, cert_path)
            Pass the full path to the bad certificate.

        Inherited methods
            exceptions.BaseException.__delattr__(...)
            exceptions.BaseException.__getattribute__(...)
            exceptions.BaseException.__getitem__(x, y)
            exceptions.BaseException.__getslice__(x, i, j)
            exceptions.Exception.__new__(T, S, *...)
            exceptions.BaseException.__reduce__(...)
            exceptions.BaseException.__repr__(x)
            exceptions.BaseException.__setattr__(...)
            exceptions.BaseException.__setstate__(...)
            exceptions.BaseException.__str__(x)
            exceptions.BaseException.__unicode__(...)

    class RestlibException(ConnectionException)


        __init__(self, code, msg="")
            x.__init__(...) initializes x; see x.__class__.__doc__ for
            signature

        __str__(self)
            str(x)

        Inherited methods
            exceptions.BaseException.__delattr__(...)
            exceptions.BaseException.__getattribute__(...)
            exceptions.BaseException.__getitem__(x, y)
            exceptions.BaseException.__getslice__(x, i, j)
            exceptions.Exception.__new__(T, S, *...)
            exceptions.BaseException.__reduce__(...)
            exceptions.BaseException.__repr__(x)
            exceptions.BaseException.__setattr__(...)
            exceptions.BaseException.__setstate__(...)
            exceptions.BaseException.__unicode__(...)

    class NetworkException(ConnectionException)


        __init__(self, code)
            x.__init__(...) initializes x; see x.__class__.__doc__ for
            signature

        Inherited methods
            exceptions.BaseException.__delattr__(...)
            exceptions.BaseException.__getattribute__(...)
            exceptions.BaseException.__getitem__(x, y)
            exceptions.BaseException.__getslice__(x, i, j)
            exceptions.Exception.__new__(T, S, *...)
            exceptions.BaseException.__reduce__(...)
            exceptions.BaseException.__repr__(x)
            exceptions.BaseException.__setattr__(...)
            exceptions.BaseException.__setstate__(...)
            exceptions.BaseException.__str__(x)
            exceptions.BaseException.__unicode__(...)

    class RemoteServerException(ConnectionException)


        __init__(self, code)
            x.__init__(...) initializes x; see x.__class__.__doc__ for
            signature

        Inherited methods
            exceptions.BaseException.__delattr__(...)
            exceptions.BaseException.__getattribute__(...)
            exceptions.BaseException.__getitem__(x, y)
            exceptions.BaseException.__getslice__(x, i, j)
            exceptions.Exception.__new__(T, S, *...)
            exceptions.BaseException.__reduce__(...)
            exceptions.BaseException.__repr__(x)
            exceptions.BaseException.__setattr__(...)
            exceptions.BaseException.__setstate__(...)
            exceptions.BaseException.__str__(x)
            exceptions.BaseException.__unicode__(...)

    class NoOpChecker


        __init__(self, host=None, peerCertHash=None, peerCertDigest='sha1')

        __call__(self, peerCert, host=None)

    class RhsmProxyHTTPSConnection(M2Crypto.httpslib.ProxyHTTPSConnection)


        endheaders(self, body=None)
            Indicate that the last header line has been sent to the server.

        _get_connect_msg(self)
            Return an HTTP CONNECT request to send to the proxy.

        Inherited methods
            M2Crypto.httpslib.ProxyHTTPSConnection.__init__(self, host, port=None, strict=None, username=None,
                 password=None, **ssl)
            M2Crypto.httpslib.ProxyHTTPSConnection._encode_auth(self)
            httplib.HTTPConnection._output(self, s)
            httplib.HTTPConnection._send_output(self)
            httplib.HTTPConnection._send_request(self, method, url, body, headers)
            httplib.HTTPConnection._set_hostport(self, host, port)
            httplib.HTTPConnection._set_tunnel(self, host, port=None, headers=None)
            M2Crypto.httpslib.ProxyHTTPSConnection._start_ssl(self)
            httplib.HTTPConnection._tunnel(self)
            M2Crypto.httpslib.HTTPSConnection.close(self)
            M2Crypto.httpslib.ProxyHTTPSConnection.connect(self)
            M2Crypto.httpslib.HTTPSConnection.get_session(self)
            httplib.HTTPConnection.getresponse(self)
            M2Crypto.httpslib.ProxyHTTPSConnection.putheader(self, header, value)
            M2Crypto.httpslib.ProxyHTTPSConnection.putrequest(self, method, url, skip_host=0, skip_accept_encoding=0)
            httplib.HTTPConnection.request(self, method, url, body=None, headers={})
            httplib.HTTPConnection.send(self, str)
            httplib.HTTPConnection.set_debuglevel(self, level)
            M2Crypto.httpslib.HTTPSConnection.set_session(self, session)

        Inherited class variables
            M2Crypto.httpslib.ProxyHTTPSConnection._AUTH_HEADER = "Proxy-Authorization"
            M2Crypto.httpslib.ProxyHTTPSConnection._UA_HEADER = "User-Agent"
            httplib.HTTPConnection._http_vsn = 11
            httplib.HTTPConnection._http_vsn_str = 'HTTP/1.1'
            M2Crypto.httpslib.ProxyHTTPSConnection._ports = {'http': 80, 'https': 443}
            httplib.HTTPConnection.auto_open = 1
            httplib.HTTPConnection.debuglevel = 0
            M2Crypto.httpslib.HTTPSConnection.default_port = HTTPS_PORT
            httplib.HTTPConnection.strict = 0

        Inherited nested classes
            class httplib.HTTPConnection.response_class

    class Restlib(object)
        A wrapper around httplib to make rest calls easier


        __init__(self, host, ssl_port, apihandler, username=None,
                 password=None, proxy_hostname=None, proxy_port=None,
                 proxy_user=None, proxy_password=None, cert_file=None,
                 key_file=None, ca_dir=None, insecure=False,
                 ssl_verify_depth=1)
            x.__init__(...) initializes x; see x.__class__.__doc__ for
            signature

        _load_ca_certificates(self, context)

        _request(self, request_type, method, info=None)

        validateResponse(self, response)

        _parse_msg_from_error_response_body(self, body)

        request_get(self, method)

        request_post(self, method, params="")

        request_head(self, method)

        request_put(self, method, params="")

        request_delete(self, method)

        Inherited methods

    class UEPConnection
        Class for communicating with the REST interface of a Red Hat
        Unified Entitlement Platform.


        __init__(self, host=config.get('server','hostname'),
                 ssl_port=int(config.get('server','port')),
                 handler=config.get('server','prefix'),
                 proxy_hostname=config.get('server','proxy_hostname'),
                 proxy_port=config.get('server','proxy_port'),
                 proxy_user=config.get('server','proxy_user'),
                 proxy_password=config.get('server','proxy_password'),
                 username=None, password=None, cert_file=None,
                 key_file=None, insecure=None)
            Two ways to authenticate:

              - username/password for HTTP basic authentication. (owner
                admin role)
              - uuid/key_file/cert_file for identity cert authentication.
                (consumer role)

            Must specify one method of authentication or the other, not
            both.

        _load_supported_resources(self)
            Load the list of supported resources by doing a GET on the root
            of the web application we're configured to use.

            Need to handle exceptions here because sometimes UEPConnections
            are created in a state where they can't actually be used. (they
            get replaced later) If something goes wrong making this
            request, just leave the list of supported resources empty.

        supports_resource(self, resource_name)
            Check if the server we're connecting too supports a particular
            resource. For our use cases this is generally the plural form
            of the resource.

        shutDown(self)

        ping(self, username=None, password=None)

        registerConsumer(self, name="unknown", type="system", facts={},
                         owner=None, environment=None, keys=None,
                         installed_products=None)
            Creates a consumer on candlepin server

        hypervisorCheckIn(self, owner, env, host_guest_mapping)

            Sends a mapping of hostIds to list of guestIds to candlepin
            to be registered/updated.

            host_guest_mapping is as follows:

            {
                'host-id-1': ['guest-id-1', 'guest-id-2'],
                'host-id-2': ['guest-id-3', 'guest-id-4']
            }

        updateConsumerFacts(self, consumer_uuid, facts={})
            Update a consumers facts on candlepin server

        updateConsumer(self, uuid, facts=None, installed_products=None,
                       guest_uuids=None)
            Update a consumer on the server.

            Rather than requiring a full representation of the consumer,
            only some information is passed depending on what we wish to
            update.

            Note that installed_products and guest_uuids expects a certain
            format, example parsing is in subscription-manager's
            format_for_server() method.

        updatePackageProfile(self, consumer_uuid, pkg_dicts)
            Updates the consumer's package profile on the server.

            pkg_dicts expected to be a list of dicts, each containing the
            package headers we're interested in. See profile.py.

        getConsumer(self, uuid, username=None, password=None)
            Returns a consumer object with pem/key for existing consumers

        getOwner(self, uuid)
            Returns an owner object with pem/key for existing consumers

        getOwnerList(self, username)
            Returns an owner objects with pem/key for existing consumers

        unregisterConsumer(self, consumerId)
            Deletes a consumer from candlepin server

        getCertificates(self, consumer_uuid, serials=[])
            Fetch all entitlement certificates for this consumer. Specify a
            list of serial numbers to filter if desired.

        getCertificateSerials(self, consumerId)
            Get serial numbers for certs for a given consumer

        bindByEntitlementPool(self, consumerId, poolId, quantity=None)
            Subscribe consumer to a subscription by pool ID.

        bindByProduct(self, consumerId, products)
            Subscribe consumer directly to one or more products by their
            ID. This will cause the UEP to look for one or more pools which
            provide access to the given product.

        bind(self, consumerId, entitle_date=None)
            Same as bindByProduct, but assume the server has a list of the
            system's products. This is useful for autosubscribe. Note that
            this is done on a best-effort basis, and there are cases when
            the server will not be able to fulfill the client's product
            certs with entitlements.

        unbindBySerial(self, consumerId, serial)

        unbindAll(self, consumerId)

        getPoolsList(self, consumer=None, listAll=False, active_on=None,
                     owner=None)
            List pools for a given consumer or owner.

            Ideally, try to always pass the owner key argument. The old
            method is deprecated and may eventually be removed.

        getPool(self, poolId)

        getProduct(self, product_id)

        getEntitlementList(self, consumerId)

        getEnvironmentList(self, owner_key)
            List the environments for a particular owner.

            Some servers may not support this and will error out. The
            caller can always check with supports_resource("environments").

        getEnvironment(self, owner_key=None, name=None)
            Fetch an environment for an owner.

            If querying by name, owner is required as environment names are
            only unique within the context of an owner.

            TODO: Add support for querying by ID, this will likely hit an
            entirely different URL.

        getEntitlement(self, entId)

        regenIdCertificate(self, consumerId)

        activateMachine(self, consumerId, email=None, lang=None)
            Activate a subscription by machine, information is located in
            the consumer facts

        sanitize(self, urlParam, plus=False)

FUNCTIONS

    _get_locale()

VARIABLES

    h = NullHandler()

    log = logging.getLogger(__name__)

    config = initConfig()
