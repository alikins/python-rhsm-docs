MODULE NAME
    rhsm.pathtree


CLASSES

    class PathTree(object)

        This builds and makes available a tree that represents matchable paths. A
        path must be matched starting from its root and the root of the tree,
        matching one segment at a time.

        There are three trees involved in the process, and that can get confusing.

        1)  Word Tree: This is a Huffman tree made from the word list provided at
            the beginning of the data stream.
        2)  Huffman Path Tree: This is a Huffman tree made of nodes whose values
            will become nodes in the Path Tree. This tree exists so there can be
            a Huffman code associated with each node in the Path Tree. However,
            the Path Tree itself will arrange this data much differently.
        3)  Path Tree: This is the tree used to match paths. Each node is a
            dict where keys are path segments (the middle part of /.../) and each
            value is a list of other nodes.


        __init__(self, data)

            Uncompresses data into a tree that can be traversed for matching paths

            :param data:    binary data as read from a file or pulled directly out
                            of a certificate extension. Data should be compressed
                            with huffman coding as described for v3 entitlement
                            certificates
            :type  data:    binary string

        match_path(self, path)
            Given an absolute path, determines if the path tree contains
            any complete paths that exactly equal the beginning of this
            path. Thus, The tree is traversed from its root, and as long as
            the provided path does not hit its end before hitting the end
            of a tree path, this will return True.

            :param path:    absolute path to match against the tree :type
            path:    str :return:        True iff there is a match, else
            False :rtype:         bool

        Class methods

            _traverse_tree(cls, tree, words)

                Helper method for match_path that does recursive matching.

                :param tree:    A dict representing a node in the greater path tree.
                :type  tree:    dict
                :param words:   list of words to match, the result of spliting a path
                                by the "/" separator. Words must be sorted with the
                                next word to match being at words[0]
                :param words:   list
                :return:        True iff there is a match, else False
                :rtype:         bool

            _generate_path_leaves(cls, bitstream)

                Given the remaining bits after decompressing the word list, this
                generates HummanNode objects to represent each node (besides root)
                that will end up in the path tree.

                :param bitstream:   stream of bits remaining after decompressing the
                                    word list
                :type  bitstream:   rhsm.bitstream.GhettoBitStream
                :return:            list of HuffmanNode objects that can be used to
                                    build a path tree
                :rtype:             list of HuffmanNode objects

            _generate_path_tree(cls, path_dict, path_leaves, word_dict,
                                bitstream)

                Once huffman trees have been generated for the words and for the path
                nodes, this method uses them and the bit stream to create the path tree
                that can be traversed to match potentially authorized paths.

                :param path_dict:   dictionary where keys are huffman codes and values
                                    are path nodes.
                :type  path_dict:   dict
                :param path_leaves: leaf nodes from the huffman tree of path nodes. the
                                    values will be constructed into a new tree that can
                                    be traversed to match actual paths.
                :type  path_leaves: list of HuffmanNode instances
                :param word_dict:   dict where keys are huffman codes and values are
                                    words from the zlib-compressed word list.
                :type  word_dict:   dict
                :param bitstream:   bit stream where the rest of the bits describe
                                    how to use words as references between nodes in
                                    the path tree. This format is described in detail
                                    in the v3 entitlement certificate docs.
                :type  bitstream:   rhsm.bitstream.GhettoBitStream

        Static methods

            _unpack_data(data)

                :param data:    binary data as read from a file or pulled directly out
                                of a certificate extension. Data should be compressed
                                with huffman coding as described for v3 entitlement
                                certificates
                :type  data:    binary string
                :return:        tuple: (list of HuffmanNode instances not yet in a
                                tree, binary string of leftover bits that were not
                                part of the zlib-compressed word list
                :rtype:         tuple(list, binary string)

            _get_node_count(bitstream)

                Determine the total number of nodes in the uncompressed tree. The
                algorithm for doing so is described in the v3 entitlement cert
                format documentation.

                :param bitstream:   the full bit stream following the zlib-compressed
                                    word list. As defined in the v3 entitlement cert
                                    format, the beginning of this stream defines how
                                    many total nodes exist. This method retrieves that
                                    value.
                :type  bitstream:   rhsm.bitstream.GhettoBitStream
                :return:            number of nodes
                :rtype:             int

            _get_leaf_from_dict(code_dict, bitstream)
                Given a bit stream and dictionary where keys are huffman
                codes, return the value from that dictionary that
                corresponds to the next huffman code in the stream. This is
                a substitute for actually traversing the tree, and this
                likely performs better in large data sets.

                :param code_dict:   any dictionary where keys are huffman
                codes :type  code_dict:   dict :param bitstream:   bit
                stream with a huffman code as the next value :type
                bitstream:   rhsm.bitstream.GhettoBitStream :return:
                value from the dict

        Inherited methods

VARIABLES

    PATH_END = 'PATH END'
