MODULE NAME
    rhsm.certificate

DESCRIPTION
    Contains classes for working with x.509 certificates. The backing
    implementation is M2Crypto.X509 which has insufficient support for
    custom v3 extensions.  It is not intended to be a replacement of full
    wrapper but instead an extension.

    Several of the classes in this module are now marked deprecated in
    favor of their new counterparts in certificate2 module. However, rather
    than depending on either specifically, you can use the create methods
    below to automatically create the correct object for any given
    certificate.

    Eventually the deprecated classes below will be removed, and the new
    classes will be relocated into this module.


CLASSES

    class UTC(datetime.tzinfo)


        tzname(self, date_time)

        dst(self, date_time)

        utcoffset(self, date_time)

        __repr__(self)

    class Certificate(object)
        Represents and x.509 certificate.


        __init__(self, content=None)
            x.__init__(...) initializes x; see x.__class__.__doc__ for
            signature

        _update(self, content)

        _parse_subject(self)

        serialNumber(self)
            Get the serial number
            Returns:
                The x.509 serial number
            Return type:
                str

        subject(self)
            Get the certificate subject. note: Missing NID mapping for UID
            added to patch openssl.
            Returns:
                A dictionary of subject fields.
            Return type:
                dict

        alternateName(self)
            Return the altername name of the certificate.
            Returns:
                A string representation of hte alternate name
            Return type:
                str

        validRange(self)
            Get the valid date range.
            Returns:
                The valid date range.
            Return type:
                DateRange

        valid(self, on_date=None)
            Get whether the certificate is valid based on date.
            Returns:
                True if valid.
            Return type:
                boolean

        expired(self, on_date=None)
            Get whether the certificate is expired based on date.
            Returns:
                True if valid.
            Return type:
                boolean

        bogus(self)
            Get whether the certificate contains bogus data or is otherwise
            unsuitable.  The certificate may be valid but still be
            considered bogus.
            Returns:
                List of reasons if bogus
            Return type:
                list

        extensions(self)
            Get custom extensions.
            Returns:
                An extensions object.
            Return type:
                Extensions

        read(self, pem_path)
            Read a certificate file.
            Returns:
                A certificate
            Return type:
                Certificate

        write(self, pem_path)
            Write the certificate.
            Returns:
                self

        delete(self)
            Delete the file associated with this certificate.

        toPEM(self)
            Get PEM representation of the certificate.
            Returns:
                A PEM string
            Return type:
                str

        __str__(self)
            str(x)

        __repr__(self)
            repr(x)

        __cmp__(self, other)

        Instance variables

            __ext
                A dictionary of extensions OID:value

            x509
                The M2Crypto.X509 backing object.

        Inherited methods

    class RedhatCertificate(Certificate)
        Represents a Red Hat certificate.


        _update(self, content)

        redhat(self)
            Get the extension subtree for the redhat namespace.
            Returns:
                The extensions with the RH namespace trimmed.
            Return type:
                Extension

        bogus(self)
            Get whether the certificate contains bogus data or is otherwise
            unsuitable.  The certificate may be valid but still be
            considered bogus.
            Returns:
                List of reasons if bogus
            Return type:
                list

        Class variables

            REDHAT = '1.3.6.1.4.1.2312.9'
                The Red Hat base OID.

        Inherited methods
            rhsm.certificate.Certificate.__cmp__(self, other)
            rhsm.certificate.Certificate.__init__(self, content=None)
            rhsm.certificate.Certificate.__repr__(self)
            rhsm.certificate.Certificate.__str__(self)
            rhsm.certificate.Certificate._parse_subject(self)
            rhsm.certificate.Certificate.alternateName(self)
            rhsm.certificate.Certificate.delete(self)
            rhsm.certificate.Certificate.expired(self, on_date=None)
            rhsm.certificate.Certificate.extensions(self)
            rhsm.certificate.Certificate.read(self, pem_path)
            rhsm.certificate.Certificate.serialNumber(self)
            rhsm.certificate.Certificate.subject(self)
            rhsm.certificate.Certificate.toPEM(self)
            rhsm.certificate.Certificate.valid(self, on_date=None)
            rhsm.certificate.Certificate.validRange(self)
            rhsm.certificate.Certificate.write(self, pem_path)

        Inherited instance variables
            rhsm.certificate.Certificate.x509

    class ProductCertificate(RedhatCertificate)
        Represents a Red Hat product/entitlement certificate. It is OID
        schema aware and provides methods to get product information.


        getProduct(self)
            Get the product defined in the certificate.
            Returns:
                A product object.
            Return type:
                Product

        getProducts(self)
            Get a list products defined in the certificate.
            Returns:
                A list of product objects.
            Return type:
                [Product,..]

        bogus(self)
            Get whether the certificate contains bogus data or is otherwise
            unsuitable.  The certificate may be valid but still be
            considered bogus.
            Returns:
                List of reasons if bogus
            Return type:
                list

        __str__(self)
            str(x)

        Inherited methods
            rhsm.certificate.Certificate.__cmp__(self, other)
            rhsm.certificate.Certificate.__init__(self, content=None)
            rhsm.certificate.Certificate.__repr__(self)
            rhsm.certificate.Certificate._parse_subject(self)
            rhsm.certificate.RedhatCertificate._update(self, content)
            rhsm.certificate.Certificate.alternateName(self)
            rhsm.certificate.Certificate.delete(self)
            rhsm.certificate.Certificate.expired(self, on_date=None)
            rhsm.certificate.Certificate.extensions(self)
            rhsm.certificate.Certificate.read(self, pem_path)
            rhsm.certificate.RedhatCertificate.redhat(self)
            rhsm.certificate.Certificate.serialNumber(self)
            rhsm.certificate.Certificate.subject(self)
            rhsm.certificate.Certificate.toPEM(self)
            rhsm.certificate.Certificate.valid(self, on_date=None)
            rhsm.certificate.Certificate.validRange(self)
            rhsm.certificate.Certificate.write(self, pem_path)

        Inherited instance variables
            rhsm.certificate.Certificate.x509

        Inherited class variables
            rhsm.certificate.RedhatCertificate.REDHAT = '1.3.6.1.4.1.2312.9'

    class EntitlementCertificate(ProductCertificate)
        Represents an entitlement certificate.


        _update(self, content)

        delete(self)
            Delete the file associated with this certificate.

        getOrder(self)
            Get the order object defined in the certificate.
            Returns:
                An order object.
            Return type:
                Order

        getEntitlements(self)
            Get all entitlements defined in the certificate.
            Returns:
                A list of entitlement object.
            Return type:
                [Entitlement,..]

        getContentEntitlements(self)
            Get the content entitlements defined in the certificate.
            Returns:
                A list of entitlement object.
            Return type:
                [Content,..]

        getRoleEntitlements(self)
            Get the role entitlements defined in the certificate.
            Returns:
                A list of entitlement object.
            Return type:
                [Role,..]

        validRangeWithGracePeriod(self)

        validWithGracePeriod(self)

        bogus(self)
            Get whether the certificate contains bogus data or is otherwise
            unsuitable.  The certificate may be valid but still be
            considered bogus.
            Returns:
                List of reasons if bogus
            Return type:
                list

        __str__(self)
            str(x)

        Inherited methods
            rhsm.certificate.Certificate.__cmp__(self, other)
            rhsm.certificate.Certificate.__init__(self, content=None)
            rhsm.certificate.Certificate.__repr__(self)
            rhsm.certificate.Certificate._parse_subject(self)
            rhsm.certificate.Certificate.alternateName(self)
            rhsm.certificate.Certificate.expired(self, on_date=None)
            rhsm.certificate.Certificate.extensions(self)
            rhsm.certificate.ProductCertificate.getProduct(self)
            rhsm.certificate.ProductCertificate.getProducts(self)
            rhsm.certificate.Certificate.read(self, pem_path)
            rhsm.certificate.RedhatCertificate.redhat(self)
            rhsm.certificate.Certificate.serialNumber(self)
            rhsm.certificate.Certificate.subject(self)
            rhsm.certificate.Certificate.toPEM(self)
            rhsm.certificate.Certificate.valid(self, on_date=None)
            rhsm.certificate.Certificate.validRange(self)
            rhsm.certificate.Certificate.write(self, pem_path)

        Inherited instance variables
            rhsm.certificate.Certificate.x509

        Inherited class variables
            rhsm.certificate.RedhatCertificate.REDHAT = '1.3.6.1.4.1.2312.9'

    class Key(object)
        The (private|public) key.


        __init__(self, content)
            x.__init__(...) initializes x; see x.__class__.__doc__ for
            signature

        bogus(self)

        write(self, pem_path)
            Write the key.
            Returns:
                self

        delete(self)
            Delete the file associated with this key.

        __str__(self)
            str(x)

        Class methods

            read(cls, pem_path)
                Read the key.

        Instance variables

            content
                The PEM encoded key.

        Inherited methods

    class DateRange
        Date range object.


        __init__(self, begin_date, end_date)

        _convert_to_utc(self, timestamp)

        begin(self)
            Get range beginning.
            Returns:
                The beginning date in UTC.
            Return type:
                datetime.datetime

        end(self)
            Get range end.
            Returns:
                The end date in UTC.
            Return type:
                datetime.datetime

        hasNow(self)
            Get whether the certificate is valid based on the date now.
            Returns:
                True if valid.
            Return type:
                boolean

        has_date(self, date)
            Get whether the certificate is valid based on the date now.
            Returns:
                True if valid.
            Return type:
                boolean

        hasDate(self, date)

        __str__(self)

        Instance variables

            begin_date
                The begining date

            end_date
                The ending date

    class GMT(datetime.tzinfo)
        GMT


        utcoffset(self, date_time)

        tzname(self, date_time)

        dst(self, date_time)

    class Extensions(dict)
        Represents x.509 (v3) custom extensions.


        __init__(self, x509)
            x.__init__(...) initializes x; see x.__class__.__doc__ for
            signature
            Return type:
                new empty dictionary

        ltrim(self, n)
            Left trim n parts.
            Returns:
                The trimmed OID
            Return type:
                Extensions

        get(self, oid, default=None)
            Get the value of an extension by oid. Note: The oid may contain
            (*) wildcards.
            Returns:
                The value of the first extension matched.
            Return type:
                str

        find(self, oid, limit=0)
            Find all extensions matching the oid. Note: The oid may contain
            (*) wildcards.
            Returns:
                A list of matching items.
            Return type:
                (OID, value)

        branch(self, root)
            Find a subtree by matching the oid.
            Returns:
                A subtree.
            Return type:
                Extensions

        _get_extensions_block(self, x509)
            Isolate the block of text with the extensions.

        _parse(self, x509)
            Parse the extensions section. Expects an m2crypto X509 object.

        __str__(self)
            str(x)

        Inherited methods
            dict.__cmp__(x, y)
            dict.__contains__(D, k)
            dict.__delitem__(x, y)
            dict.__eq__(x, y)
            dict.__ge__(x, y)
            dict.__getattribute__(...)
            dict.__getitem__(x, y)
            dict.__gt__(x, y)
            dict.__iter__(x)
            dict.__le__(x, y)
            dict.__len__(x)
            dict.__lt__(x, y)
            dict.__ne__(x, y)
            dict.__new__(T, S, *...)
            dict.__repr__(x)
            dict.__setitem__(x, i, y)
            dict.__sizeof__(D)
            dict.clear(D)
            dict.copy(D)
            dict.fromkeys(dict, S, v=...)
            dict.has_key(D, k)
            dict.items(D)
            dict.iteritems(D)
            dict.iterkeys(D)
            dict.itervalues(D)
            dict.keys(D)
            dict.pop(D, k, d=...)
            dict.popitem(D)
            dict.setdefault(D, k, d=...)
            dict.update(D, E, **F)
            dict.values(D)

        Inherited class variables
            dict.__hash__ = None

    class OID(object)
        The Object Identifier object.


        __init__(self, oid)
            x.__init__(...) initializes x; see x.__class__.__doc__ for
            signature

        parent(self)
            Get the parent OID.
            Returns:
                The parent OID.
            Return type:
                OID

        ltrim(self, n)
            Left trim n parts.
            Returns:
                The trimmed OID
            Return type:
                OID

        rtrim(self, n)
            Right trim n parts.
            Returns:
                The trimmed OID
            Return type:
                OID

        append(self, oid)
            Append the specified OID fragment.
            Returns:
                The concatenated OID.
            Return type:
                OID

        match(self, oid)
            Match the specified OID considering wildcards. Patterns:

              - 1.4.5.6.74 (not wildcarded)
              - .5.6.74 (match on only last 4)
              - 5.6.74. (match only first 4)
              - 1.4.*.6.*  (wildcard pattern)
            Returns:
                True if matched

        __len__(self)

        __getitem__(self, index)

        __repr__(self)
            repr(x)

        __hash__(self)
            hash(x)

        __eq__(self, other)

        __str__(self)
            str(x)

        Class methods

            join(cls, *oid)

            split(cls, s)
                Split an OID string.
                Returns:
                    A list of OID parts.
                Return type:
                    [str,]

        Instance variables

            part
                The oid parts.

        Class variables

            WILDCARD = '*'
                The wildcard character.

        Inherited methods

    class Order


        __init__(self, ext)

        getName(self)

        getNumber(self)

        getSku(self)

        getSubscription(self)

        getQuantity(self)

        getStart(self)

        getEnd(self)

        getVirtLimit(self)

        getSocketLimit(self)

        getContract(self)

        getQuantityUsed(self)
            Returns the quantity of the subscription that *this*
            entitlement is using.

            WARNING: a little misleading as it (a) is part of the order
            namespace and (b) sounds suspiciously like the total consumed
            quantity of the subscription.

        getWarningPeriod(self)

        getAccountNumber(self)

        getProvidesManagement(self)

        getSupportLevel(self)

        getSupportType(self)

        getStackingId(self)

        getVirtOnly(self)

        __str__(self)

    class Product


        __init__(self, p_hash, ext)

        getHash(self)

        getName(self)

        getArch(self)

        getVersion(self)

        getProvidedTags(self)

        __eq__(self, rhs)

        __str__(self)

        __repr__(self)

    class Entitlement


        __init__(self, ext)

    class Content(Entitlement)


        __init__(self, ext)

        getName(self)

        getLabel(self)

        getQuantity(self)

        getFlexQuantity(self)

        getVendor(self)

        getUrl(self)

        getGpg(self)

        getEnabled(self)

        getMetadataExpire(self)

        getRequiredTags(self)

        __eq__(self, rhs)

        __str__(self)

        __repr__(self)

    class Role(Entitlement)


        getName(self)

        getDescription(self)

        __eq__(self, rhs)

        __str__(self)

        __repr__(self)

        Inherited methods
            rhsm.certificate.Entitlement.__init__(self, ext)

    class CertificateException(exceptions.Exception)

        Inherited methods
            exceptions.BaseException.__delattr__(...)
            exceptions.BaseException.__getattribute__(...)
            exceptions.BaseException.__getitem__(x, y)
            exceptions.BaseException.__getslice__(x, i, j)
            exceptions.Exception.__init__(...)
            exceptions.Exception.__new__(T, S, *...)
            exceptions.BaseException.__reduce__(...)
            exceptions.BaseException.__repr__(x)
            exceptions.BaseException.__setattr__(...)
            exceptions.BaseException.__setstate__(...)
            exceptions.BaseException.__str__(x)
            exceptions.BaseException.__unicode__(...)

FUNCTIONS

    create_from_file(path)

    create_from_pem(pem)

    parse_tags(tag_str)
        Split a comma separated list of tags from a certificate into a
        list.

    get_datetime_from_x509(date)

    deprecated(func)
        A decorator that marks a function as deprecated. This will cause a
        warning to be emitted any time that function is used by a caller.

VARIABLES

    log = logging.getLogger(__name__)

    OID_PATTERN = re.compile('([0-9]+\.)+[0-9]+:')

    VALUE_PATTERN = re.compile('.*prim:\s(\w*)\s*:*(.*)')
